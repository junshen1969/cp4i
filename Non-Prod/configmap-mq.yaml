kind: ConfigMap
apiVersion: v1
metadata:
  name: mq-ts1-cfg
  namespace: iop-ts1
data:
  config.mqsc: |
    ** CONFIGURING DLQ STARTS
    DEFINE QLOCAL('TS1DMA301.DLQ') REPLACE
    ALTER QMGR DEADQ('TS1DMA301.DLQ') MONQ(HIGH)
    ** CONFIGURING DLQ ENDS
    
    ** CONFIGURING LISTENER STARTS
    DEFINE LISTENER('TS1DMA301.LISTENER') TRPTYPE(TCP) PORT(1414) CONTROL(QMGR) REPLACE
    START LISTENER('TS1DMA301.LISTENER')
    ** CONFIGURING LISTENER ENDS
    
    ** CONFIGURING CHANNELS STARTS
    
    
    ** CONFIGURING CHANNELS ENDS
    
    ** CONFIGURING CHANNELS AUTH RECORDS STARTS
    
    * Developer connection authentication
    DEFINE AUTHINFO('TS1DMA301.AUTHINFO') AUTHTYPE(IDPWOS) CHCKCLNT(REQDADM) CHCKLOCL(OPTIONAL) ADOPTCTX(YES) REPLACE
    ALTER QMGR CONNAUTH('TS1DMA301.AUTHINFO')
    REFRESH SECURITY(*) TYPE(CONNAUTH)
    
    * Channel Auth Records
    *** Enable user access to ACE.PRE.CLIENT channel
    *** Block everyone
    SET CHLAUTH('*') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(NOACCESS) DESCR('Back-stop rule - Blocks everyone') ACTION(REPLACE)
    
    ** CONFIGURING CHANNELS AUTH RECORDS ENDS
    
    ** CONFIGURING TOPICS STARTS
    * Base Topic
    DEFINE TOPIC('SF.BASE.TOPIC') TOPICSTR('/sf') REPLACE
    * Application Topics
    DEFINE TOPIC(SF.METADATA.TOPIC) TOPICSTR('$SYS/Application/runmqsfb')
    DEFINE TOPIC('IOP.CS.NOTIFICATIONS') TOPICSTR('/iop/cs_notifications') REPLACE
    
    ** CONFIGURING TOPICS ENDS
    
    ** CONFIGURING LOCAL QUEUES STARTS
    
    * SF event queue
    DEFINE QLOCAL('CS.SF.EVENT.QUEUE') BOQNAME('CS.EVENTS.SF.BOQ') REPLACE
    
    * SF event queue
    DEFINE QLOCAL('CS.EVENTS.SF.BOQ') REPLACE
    DEFINE QLOCAL('CS.EVENTS.SF') BOQNAME('CS.EVENTS.SF.BOQ') BOTHRESH(3) REPLACE
    
    * ACCTION event queue
    DEFINE QLOCAL('CS.EVENTS.ACCTION.BOQ') REPLACE
    DEFINE QLOCAL('CS.EVENTS.ACCTION') BOQNAME('CS.EVENTS.ACCTION.BOQ') BOTHRESH(3) REPLACE
    
    * Notifications queue
    DEFINE QLOCAL('CS.NOTIFICATIONS.BOQ') REPLACE
    DEFINE QLOCAL('CS.NOTIFICATIONS') BOQNAME('CS.NOTIFICATIONS.BOQ') BOTHRESH(3) REPLACE
    
    *document upload queue
    DEFINE QLOCAL('CS.DOCUMENT.UPLOAD.BOQ') REPLACE
    DEFINE QLOCAL('CS.DOCUMENT.UPLOAD') BOQNAME('CS.DOCUMENT.UPLOAD.BOQ') BOTHRESH(3) REPLACE
    *document upload queue
    DEFINE QLOCAL('SC.DOCUMENT.UPLOAD.PENDING.BOQ') REPLACE
    DEFINE QLOCAL('SC.DOCUMENT.UPLOAD.PENDING') BOQNAME('SC.DOCUMENT.UPLOAD.PENDING.BOQ') BOTHRESH(3) REPLACE
    
    *document merge queue
    DEFINE QLOCAL('CS.DOCMERGE.EVENT.SF.BOQ') REPLACE
    DEFINE QLOCAL('CS.DOCMERGE.EVENT.SF') BOQNAME('CS.DOCMERGE.EVENT.SF.BOQ') BOTHRESH(2) REPLACE
    
    
    * PUBLICATION queue
    DEFINE QLOCAL('CS.PUBLICATION.PUBLISH.RETRY.BOQ') REPLACE
    DEFINE QLOCAL('CS.PUBLICATION.PUBLISH.RETRY') BOQNAME('CS.PUBLICATION.RETRY.BOQ') BOTHRESH(5) REPLACE
    
    DEFINE QLOCAL('CS.PUBLICATION.UPDATESTATUS.RETRY.BOQ') REPLACE
    DEFINE QLOCAL('CS.PUBLICATION.UPDATESTATUS.RETRY') BOQNAME('CS.PUBLICATION.UPDATESTATUS.RETRY.BOQ') BOTHRESH(5) REPLACE
    
    DEFINE QLOCAL('CS.PUBLICATION.PUBLISH.BOQ') REPLACE
    DEFINE QLOCAL('CS.PUBLICATION.PUBLISH') BOQNAME('CS.PUBLICATION.PUBLISH.BOQ') BOTHRESH(5) REPLACE
    
    DEFINE QLOCAL('CS.NOTIFICATIONS.BOQ') REPLACE
    DEFINE QLOCAL('CS.NOTIFICATIONS') BOQNAME('CS.NOTIFICATIONS.BOQ') BOTHRESH(5) REPLACE
    
    * QLocal for Provider Invoice Management Responses from Mainframe via gateway
    DEFINE QLOCAL(CS.PROVIDERINVOICEMANAGEMENT.RESP) REPLACE
    * QLocal for Provider Invoice Management Responses from Mainframe via gateway - for v2
    DEFINE QLOCAL(CS.PROVIDERINVOICEMANAGEMENTV2.RESP) REPLACE
    
    * QLocal for Provider Management Responses from IIB via gateway - for v1
    DEFINE QLOCAL(CS.PROVIDERMANAGEMENT.RESP) REPLACE
    
    * QLocal for Proxy Outbpund Request from EIP via gateway
    DEFINE QLOCAL(CS.CALLBACK.REQ) REPLACE
    
    * QLocal for ClaimApplicationSubmitted event from Salesforce (via MQ Salesforce Bridge)
    DEFINE QLOCAL(CS.CLAIM.EVENT.SF.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.CLAIM.EVENT.SF) BOQNAME('CS.CLAIM.EVENT.SF.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('ClaimApplicationSubmitted event from Salesforce via MQSFB') REPLACE
    
    * QLocal for input messages to Claims ACCtion State Machine (Request Side) to SC_ClaimAsyncReq_ACC
    DEFINE QLOCAL(SC.CLAIMSACC.REQ.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(SC.CLAIMSACC.REQ.V1) BOQNAME('SC.CLAIMSACC.REQ.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('Claims ACCtion State Machine (Request) to SC_ClaimAsyncReq_ACC') REPLACE
    
    * QLocal for ACCtion EntireX responses from MF (will actually be from stub service) back to SC_ClaimAsyncResp_ACC
    DEFINE QLOCAL(SC.CLAIMSACC.RESP.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(SC.CLAIMSACC.RESP.V1) BOQNAME('SC.CLAIMSACC.RESP.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('ACCtion EntireX responses from MF - from stub in DV1') REPLACE
    
    * QLocal for Claims State Machine state storage (PUT by SC_ClaimAsyncReq_ACC, GET by SC_ClaimAsyncResp_ACC)
    DEFINE QLOCAL(SC.CLAIMSACC.STATE.V1) DEFPSIST(YES) +
    DESCR('Claims State Storage SC_ClaimAsyncReq_ACC-SC_ClaimAsyncResp_ACC') REPLACE
    
    * QLocal for Claims State Machine timeouts (Report message with data from timeout on SC.CLAIMSACC.STATE.V1)
    DEFINE QLOCAL(SC.CLAIMSACC.TIMEOUT.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(SC.CLAIMSACC.TIMEOUT.V1) DEFPSIST(YES) BOQNAME('SC.CLAIMSACC.TIMEOUT.V1.BOQ') BOTHRESH(2) +
    DESCR('Report message with data from timeout on SC.CLAIMSACC.STATE.V1') REPLACE
    
    * QLocal for Claim message from state machine to Salesforce interface -> 
    DEFINE QLOCAL(CS.CLAIMSSF.RESP.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.CLAIMSSF.RESP.V1) BOQNAME('CS.CLAIMSSF.RESP.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('Response from Claims ACCtion create objects state machine') REPLACE
    
    * QLocal for EIP requests from CS_RenderAssemblyOutcome requests 
    DEFINE QLOCAL(CS.DOCUMENT.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.DOCUMENT.V1.REQ) BOQNAME('CS.DOCUMENT.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('EIP requests for RenderAssemblyOutcome - mergeDoc response') REPLACE
    
    * QLocal for EIP EDRMS responses
    DEFINE QLOCAL(SC.ELECTRONICDOCUMENTMANAGEMENT.RESP.V1) DEFPSIST(YES) +
    DESCR('EIP EDRMS responses') REPLACE
    
    * QLocal for EIP requests from for create claim (CS_Claim_EIP)
    DEFINE QLOCAL(CS.EIP.CREATE.CLAIM.REQ.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.EIP.CREATE.CLAIM.REQ.V1) BOQNAME('CS.EIP.CREATE.CLAIM.REQ.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('EIP requests to create incomplete claim - CS_Claim_EIP') REPLACE
    
    * QLocal for EIP requests from for create CoC (CS_CoC_EIP)
    DEFINE QLOCAL(CS.EIP.REGISTER.COC.REQ.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.EIP.REGISTER.COC.REQ.V1) BOQNAME('CS.EIP.REGISTER.COC.REQ.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('EIP requests to register CoC - CS_CoC_EIP') REPLACE
    
    * QLocal for Async ACCtion responses returned to CS_Claim_EIP for formating and response to EIP
    DEFINE QLOCAL(CS.EIP.CREATE.CLAIM.RESP.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.EIP.CREATE.CLAIM.RESP.V1) BOQNAME('CS.EIP.CREATE.CLAIM.RESP.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('ACCtion responses heading towards EIP - CS_Claim_EIP') REPLACE
    
    * QLocal for Async ACCtion responses returned to CS_CoC_EIP for formating and response to EIP
    DEFINE QLOCAL(CS.EIP.CREATE.COC.RESP.V1.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(CS.EIP.CREATE.COC.RESP.V1) BOQNAME('CS.EIP.CREATE.COC.RESP.V1.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('ACCtion responses heading towards EIP - CS_Claim_EIP') REPLACE
    
    * QLocal for Sync ValidateClaim responses returned to SC_Claim_EIP 
    DEFINE QLOCAL(SC.CLAIM.EIP.RSP.V1) BOQNAME(' ') DEFPSIST(YES) +
    DESCR('Claim Validation responses to - SC_Claim_EIP') REPLACE
    
    * QLocal for Salesforce Platform Events from Salesforce (via MQ Salesforce Bridge)
    DEFINE QLOCAL(US.PLATFORM.EVENT.SF.BOQ) DEFPSIST(YES) REPLACE
    DEFINE QLOCAL(US.PLATFORM.EVENT.SF) BOQNAME('US.PLATFORM.EVENT.SF.BOQ') BOTHRESH(2) DEFPSIST(YES) +
    DESCR('Salesforce Platform events from Salesforce via MQSFB') REPLACE
    DEFINE QLOCAL(US.PLATFORM.EVENT.RETRY.SF) BOQNAME('US.PLATFORM.EVENT.SF.BOQ') BOTHRESH(2) REPLACE
    DEFINE QLOCAL(US.PLATFORM.EVENT.ERROR.SF) BOQNAME('US.PLATFORM.EVENT.SF.BOQ') BOTHRESH(2) REPLACE
    
    * SC.CLAIM.EIP.RSP.V1
    
    
    
    ** CONFIGURING LOCAL QUEUES ENDS
    
    ** CONFIGURING REMOTE QUEUES STARTS
    
    * Primary gateway remote queue - define for each on-premises destination for Provider Invoice Management Requests
    DEFINE QREMOTE(PRIMARY.CS.PROVIDERINVOICEMANAGEMENT.REQ) RNAME(CS.PROVIDER.INVOICEMANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    * Primary gateway remote queue - define for each on-premises destination for Provider Invoice Management Requests for v2
    DEFINE QREMOTE(PRIMARY.CS.PROVIDERINVOICEMANAGEMENTV2.REQ) RNAME(CS.PROVIDER.INVOICEMANAGEMENT.REQ.V2) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Provider Management Requests
    DEFINE QREMOTE(PRIMARY.CS.PROVIDERMANAGEMENT.REQ) RNAME(CS.PROVIDER.MANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Invoice Query
    DEFINE QREMOTE(PRIMARY.CS.PROVIDERINVOICEQUERYV2.REQ) RNAME(ES.INVOICE.REQ.V2) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Create Claimant
    DEFINE QREMOTE(PRIMARY.CS.IOP.ACC.CLAIMANT.REQ.V1) RNAME(CS.IOP.ACC.CLAIMANT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Create Claim
    DEFINE QREMOTE(PRIMARY.CS.IOP.ACC.CLAIM.REQ.V1) RNAME(CS.IOP.ACC.CLAIM.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Register CoC
    DEFINE QREMOTE(PRIMARY.CS.IOP.ACC.COC.REQ.V1) RNAME(CS.IOP.ACC.COC.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for EDRMS
    DEFINE QREMOTE(PRIMARY.SC.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) RNAME(ES.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for Claim validation
    DEFINE QREMOTE(PRIMARY.SC.CLAIM.EIP.REQ.V1) RNAME(SC.CLAIM.EIP.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Provider Invoice Management Requests
    DEFINE QREMOTE(BACKUP.CS.PROVIDERINVOICEMANAGEMENT.REQ) RNAME(CS.PROVIDER.INVOICEMANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    * Backup gateway remote queue - define for each on-premises destination for Provider Invoice Management Requests for v2
    DEFINE QREMOTE(BACKUP.CS.PROVIDERINVOICEMANAGEMENTV2.REQ) RNAME(CS.PROVIDER.INVOICEMANAGEMENT.REQ.V2) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Provider Invoice Management Requests
    DEFINE QREMOTE(BACKUP.CS.PROVIDERMANAGEMENT.REQ) RNAME(CS.PROVIDER.MANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Invoice Query
    DEFINE QREMOTE(BACKUP.CS.PROVIDERINVOICEQUERYV2.REQ) RNAME(ES.INVOICE.REQ.V2) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Create Claimant
    DEFINE QREMOTE(BACKUP.CS.IOP.ACC.CLAIMANT.REQ.V1) RNAME(CS.IOP.ACC.CLAIMANT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Create Claim
    DEFINE QREMOTE(BACKUP.CS.IOP.ACC.CLAIM.REQ.V1) RNAME(CS.IOP.ACC.CLAIM.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Register CoC
    DEFINE QREMOTE(BACKUP.CS.IOP.ACC.COC.REQ.V1) RNAME(CS.IOP.ACC.COC.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Backup gateway remote queue - define for each on-premises destination for Claim validation
    DEFINE QREMOTE(BACKUP.SC.CLAIM.EIP.REQ.V1) RNAME(SC.CLAIM.EIP.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * Primary gateway remote queue - define for each on-premises destination for EDRMS
    DEFINE QREMOTE(BACKUP.SC.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) RNAME(ES.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    ** CONFIGURING REMOTE QUEUES ENDS
    
    DEFINE QALIAS ('CS.PUB.NOTIFICATIONS') TARGET ('IOP.CS.NOTIFICATIONS') TARGTYPE(TOPIC) REPLACE
    
    * Alias queue points to current gateway remote queue - define for each on-premises destination
    DEFINE QALIAS(CS.PROVIDERINVOICEMANAGEMENT.REQ) TARGET(PRIMARY.CS.PROVIDERINVOICEMANAGEMENT.REQ) DEFBIND(NOTFIXED) REPLACE
    * Alias queue points to current gateway remote queue - define for each on-premises destination this is for v2 queue
    DEFINE QALIAS(CS.PROVIDERINVOICEMANAGEMENTV2.REQ) TARGET(PRIMARY.CS.PROVIDERINVOICEMANAGEMENTV2.REQ) DEFBIND(NOTFIXED) REPLACE
    
    * Alias queue points to current gateway remote queue - define for each on-premises destination
    DEFINE QALIAS(CS.PROVIDERINVOICEQUERYV2.REQ) TARGET(PRIMARY.CS.PROVIDERINVOICEQUERYV2.REQ) DEFBIND(NOTFIXED) REPLACE
    
    * Alias queue points to current gateway remote queue - define for each on-premises destination
    DEFINE QALIAS(CS.PROVIDERMANAGEMENT.REQ) TARGET(PRIMARY.CS.PROVIDERMANAGEMENT.REQ) DEFBIND(NOTFIXED) REPLACE
    
    * Send requests to ACCtion - Claimant
    DEFINE QALIAS(CS.IOP.ACC.CLAIMANT.REQ.V1) TARGTYPE(QUEUE) TARGET(PRIMARY.CS.IOP.ACC.CLAIMANT.REQ.V1) DEFPSIST(YES) DEFBIND(NOTFIXED) +
    DESCR('Send Create Claimant message to ACCtion via gateway QM') REPLACE
    * Send requests to ACCtion - Claim
    DEFINE QALIAS(CS.IOP.ACC.CLAIM.REQ.V1) TARGTYPE(QUEUE) TARGET(PRIMARY.CS.IOP.ACC.CLAIM.REQ.V1) DEFPSIST(YES) DEFBIND(NOTFIXED) +
    DESCR('Send Create Claim message to ACCtion via gateway QM') REPLACE
    * Send requests to ACCtion - CoC
    DEFINE QALIAS(CS.IOP.ACC.COC.REQ.V1) TARGTYPE(QUEUE) TARGET(PRIMARY.CS.IOP.ACC.COC.REQ.V1) DEFPSIST(YES) DEFBIND(NOTFIXED) +
    DESCR('Send Create Claim message to ACCtion via gateway QM') REPLACE
    * Send requests to Claim Validation Service in EIP
    DEFINE QALIAS(SC.CLAIM.EIP.REQ.V1) TARGTYPE(QUEUE) TARGET(PRIMARY.SC.CLAIM.EIP.REQ.V1) DEFPSIST(YES) DEFBIND(NOTFIXED) +
    DESCR('Send Validate Claim message to EIP and ODM via gateway QM') REPLACE
    
    * Alias queue points to current gateway remote queue - define for each on-premises destination
    DEFINE QALIAS(SC.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) TARGET(PRIMARY.SC.ELECTRONICDOCUMENTMANAGEMENT.REQ.V1) DEFBIND(NOTFIXED) REPLACE
    
    ** CONFIGURING ALIAS QUEUES ENDS
    
    ** CONFIGURING SUBSCRIPTIONS STARTS
    
    DEFINE SUB('SF_MQ_TOPIC') TOPICSTR('event/Employer__e') TOPICOBJ('SF.BASE.TOPIC') DEST('CS.EVENTS.SF') REPLACE
    DEFINE SUB('SF_MQ_TOPIC_DOC') TOPICSTR('event/ContentService__e') TOPICOBJ('SF.BASE.TOPIC') DEST('CS.DOCUMENT.UPLOAD') REPLACE
    DEFINE SUB('CS.IOP.NOTIFICATIONS.SUB') TOPICOBJ('IOP.CS.NOTIFICATIONS') DEST('CS.NOTIFICATIONS') REPLACE
    DEFINE SUB(SF_SUBMITCLAIM_EVENT) TOPICSTR('event/ClaimApplicationSubmitted__e') TOPICOBJ('SF.BASE.TOPIC') DEST('US.PLATFORM.EVENT.SF') REPLACE
    DEFINE SUB(SF_DOCMERGE_EVENT) TOPICSTR('event/MergeDocumentRequest__e') TOPICOBJ('SF.BASE.TOPIC') DEST('US.PLATFORM.EVENT.SF') REPLACE
    DEFINE SUB(SF_CREATETASK_EVENT) TOPICSTR('event/CreateNovusTask__e') TOPICOBJ('SF.BASE.TOPIC') DEST('US.PLATFORM.EVENT.SF') REPLACE
    
    ** CONFIGURING SUBSCRIPTIONS ENDS
    
    
    ** Refresh
    REFRESH SECURITY(*) TYPE(CONNAUTH)
    REFRESH SECURITY(*) TYPE (AUTHSERV)
  env.mqsc: |
    ****************************************************************************************************
    **                                                                                                **
    **        ATTENTION:                                                                              **
    **        New MQ Objects should generally be defined in dxcmq/mq-config/mq-config-objects.mqsc    **
    **                                                                                                **
    **        That is a common file used to configure the MQ queue manager in all environments        **
    **                                                                                                **
    **        Objects will then be created identically in all environments without having to be       **
    **        copied into the environment specific file each time a project is promoted.              **
    **                                                                                                **
    **        Where an environment needs a special definition of an object (such as a queue or topic) **
    **        a replacement definition should be created in this file.                                **
    **                                                                                                **
    **        Environment specific objects such as channels and transmission queues should be         **
    **        defined in this file so that they have custom values for each environment.              **
    **                                                                                                **
    ****************************************************************************************************
    
    
    ** CONFIGURING CHANNELS STARTS
    
    * Create channel for MQ administration
    DEFINE CHANNEL('TS1DMA301.ADMN.SVC') CHLTYPE(SVRCONN) REPLACE
    
    * Create channel for ACE.PRE.CLIENT
    DEFINE CHANNEL('ACE.PRE.CLIENT') CHLTYPE(SVRCONN) MCAUSER('app') SHARECNV(100) SSLCIPH(TLS_RSA_WITH_AES_256_GCM_SHA384) SSLPEER('CN=ACE-TS1 Client,OU=TS1/IBM MQ Client,O=ITSS,L=Geelong,ST=VIC,C=AU') CERTLABL('ibmwebspheremqts1dma301') SSLCAUTH(REQUIRED) REPLACE
    * DEFINE CHANNEL('TS1DMA301.MQSFB.SVC') CHLTYPE(SVRCONN) MCAUSER('app') TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_GCM_SHA384) SSLPEER('CN=MQSalesforceBridge-TS1 Client,OU=TS1/IBM MQ Client,O=ITSS,L=Geelong,ST=VIC,C=AU') REPLACE
    DEFINE CHANNEL('TS1DMA301.MQSFB.SVC') CHLTYPE(SVRCONN) MCAUSER('app') TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_GCM_SHA384) SSLPEER('CN=MQSalesforceBridge-TS1 Client,OU=TS1/IBM MQ Client,O=ITSS,L=Geelong,ST=VIC,C=AU') REPLACE
    
    * Create sender channel to EIP site 1 gateway QM
    DEFINE CHANNEL(TS1DMA301.TS1TG0101) CHLTYPE(SDR) TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256) SSLPEER('CN=TS1TG0101,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') CONNAME('stuwmq0101-ts1.services.workcover.vic.gov.au(1417)') XMITQ(XMITQ.GWY.PRIMARY) REPLACE
    
    * Create sender channel to EIP site 2 gateway QM
    DEFINE CHANNEL(TS1DMA301.TS1TG0201) CHLTYPE(SDR) TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256) SSLPEER('CN=TS1TG0201,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') CONNAME('stuwmq0201-ts1.services.workcover.vic.gov.au(1417)') XMITQ(XMITQ.GWY.BACKUP) REPLACE
    
    * Create receiver channel from EIP site 1 gateway QM
    DEFINE CHANNEL(TS1TG0101.TS1DMA301) CHLTYPE(RCVR) TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256) SSLPEER('CN=TS1TG0101,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') MCAUSER('*NOACCESS') REPLACE
    
    * Create receiver channel from EIP site 2 gateway QM
    DEFINE CHANNEL(TS1TG0201.TS1DMA301) CHLTYPE(RCVR) TRPTYPE(TCP) SSLCIPH(TLS_RSA_WITH_AES_256_CBC_SHA256) SSLPEER('CN=TS1TG0201,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') MCAUSER('*NOACCESS') REPLACE
    
    ** CONFIGURING CHANNELS ENDS
    
    ** CONFIGURING CHANNELS AUTH RECORDS STARTS
    SET CHLAUTH('ACE.PRE.CLIENT') TYPE(ADDRESSMAP) ADDRESS('*') USERSRC(CHANNEL) CHCKCLNT(REQUIRED) DESCR('Allows connection via APP.PRE.CLIENT channel') ACTION(REPLACE)
    SET CHLAUTH('TS1DMA301.MQSFB.SVC') TYPE(SSLPEERMAP) SSLPEER('CN=MQSalesforceBridge-TS1 Client,OU=TS1/IBM MQ Client,O=ITSS,L=Geelong,ST=VIC,C=AU')  SSLCERTI('CN=WINVMCA1,DC=melb,DC=ad ') ADDRESS('*') USERSRC(map) MCAUSER('app') ACTION(REPLACE)
    SET CHLAUTH('TS1DMA301.MQSFB.SVC') TYPE(blockuser) USERLIST('*MQADMIN') ACTION(replace)
    
    *** Enable admin user access to ADMIN channel
    SET CHLAUTH('TS1DMA301.ADMN.SVC') TYPE(BLOCKUSER) USERLIST('nobody') DESCR('Allows admins on ADMIN channel') ACTION(REPLACE)
    SET CHLAUTH('TS1DMA301.ADMN.SVC') TYPE(USERMAP) CLNTUSER('admin') USERSRC(CHANNEL) DESCR('Allows admin user to connect via ADMIN channel') ACTION(REPLACE)
    
    ** Block unrecognised certs and issuers for gateway channels
    SET CHLAUTH(TS1DMA301.TS1TG0101) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER(' ') SSLCERTI(' ') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH(TS1DMA301.TS1TG0201) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER(' ') SSLCERTI(' ') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH(TS1TG0101.TS1DMA301) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER(' ') SSLCERTI(' ') USERSRC(NOACCESS) ACTION(REPLACE)
    SET CHLAUTH(TS1TG0201.TS1DMA301) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER(' ') SSLCERTI(' ') USERSRC(NOACCESS) ACTION(REPLACE)
    
    ** Map approved cert/issuer pairs to a valid user
    SET CHLAUTH(TS1DMA301.TS1TG0101) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER('CN=TS1TG0101,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') SSLCERTI('C=AU,ST=VIC,L=Melbourne,O=ITSS,OU=DevOps CA,CN=VWA DevOps Untrusted CA') USERSRC(CHANNEL) ACTION(REPLACE)
    SET CHLAUTH(TS1DMA301.TS1TG0201) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER('CN=TS1TG0201,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') SSLCERTI('C=AU,ST=VIC,L=Melbourne,O=ITSS,OU=DevOps CA,CN=VWA DevOps Untrusted CA') USERSRC(CHANNEL) ACTION(REPLACE)
    SET CHLAUTH(TS1TG0101.TS1DMA301) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER('CN=TS1TG0101,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') SSLCERTI('C=AU,ST=VIC,L=Melbourne,O=ITSS,OU=DevOps CA,CN=VWA DevOps Untrusted CA') USERSRC(MAP) MCAUSER('_mq_chl_gwy') ACTION(REPLACE)
    SET CHLAUTH(TS1TG0201.TS1DMA301) TYPE(SSLPEERMAP) ADDRESS('*') SSLPEER('CN=TS1TG0201,OU=/TS1/,OU=IBM MQ QMgr,O=ITSS,L=Melbourne,ST=VIC,C=AU') SSLCERTI('C=AU,ST=VIC,L=Melbourne,O=ITSS,OU=DevOps CA,CN=VWA DevOps Untrusted CA') USERSRC(MAP) MCAUSER('_mq_chl_gwy') ACTION(REPLACE)
    
    ** CONFIGURING CHANNELS AUTH RECORDS ENDS
    
    ** CONFIGURING TOPICS STARTS
    
    ** CONFIGURING TOPICS ENDS
    
    ** CONFIGURING SUBSCRIPTIONS STARTS
    
    ** CONFIGURING SUBSCRIPTIONS ENDS
    
    ** CONFIGURING LOCAL QUEUES STARTS
    
    DEFINE QLOCAL('TEST.IN') REPLACE
    
    ** CONFIGURING LOCAL QUEUES ENDS
    
    ** CONFIGURING TRANSMISSION QUEUES STARTS
    
    * Transmission queue for gateway at EIP site 1
    DEFINE QLOCAL(XMITQ.GWY.PRIMARY) USAGE(XMITQ) TRIGGER TRIGTYPE(FIRST) TRIGDATA(TS1DMA301.TS1TG0101) INITQ(SYSTEM.CHANNEL.INITQ) REPLACE
    
    * Transmission queue for gateway at EIP site 2
    DEFINE QLOCAL(XMITQ.GWY.BACKUP) USAGE(XMITQ) TRIGGER TRIGTYPE(FIRST) TRIGDATA(TS1DMA301.TS1TG0201) INITQ(SYSTEM.CHANNEL.INITQ) REPLACE
    
    ** CONFIGURING TRANSMISSION QUEUES ENDS
    
    ** CONFIGURING REMOTE QUEUES STARTS
    
    * QRemote for IVP to Mainframe via gateway at site 1
    DEFINE QREMOTE(PRIMARY.CS.ACCTION.IVP) RNAME(ACCTION.IVP) RQMNAME(WSV) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * QRemote for IVP to Mainframe via gateway at site 2
    DEFINE QREMOTE(BACKUP.CS.ACCTION.IVP) RNAME(ACCTION.IVP) RQMNAME(WSV) XMITQ(XMITQ.GWY.BACKUP) DEFPSIST(YES) REPLACE
    
    * IIB Qmgr Alias remote queue 1 - defined for replies to return for each on-premises EIP IIB Qmgr
    DEFINE QREMOTE(TS1TI0101) RNAME('') RQMNAME(TS1TI0101) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    * IIB Qmgr Alias remote queue 2 - defined for replies to return for each on-premises EIP IIB Qmgr
    DEFINE QREMOTE(TS1TI0201) RNAME('') RQMNAME(TS1TI0201) XMITQ(XMITQ.GWY.PRIMARY) DEFPSIST(YES) REPLACE
    
    ** CONFIGURING REMOTE QUEUES ENDS
    
    ** CONFIGURING ALIAS QUEUES STARTS
    
    * Qaliases to allow selection of gateway using an automation script
    * aliases must match the names of the QREMOTE definitions, but with the site designation (PRIMARY./BACKUP.) removed
    DEFINE QALIAS(CS.ACCTION.IVP) TARGTYPE(QUEUE) TARGET(PRIMARY.CS.ACCTION.IVP) DEFPSIST(YES) REPLACE
    
    ** CONFIGURING ALIAS QUEUES ENDS
    
    ** RESET SENDER CHANNELS TO ALLOW FOR REBUILD - STARTS
    
    * Reset sender channel to EIP site 1 gateway QM
    RESET CHANNEL(TS1DMA301.TS1TG0101)
    
    * Reset sender channel to EIP site 2 gateway QM
    RESET CHANNEL(TS1DMA301.TS1TG0201)
    
    ** RESET SENDER CHANNELS TO ALLOW FOR REBUILD - ENDS
  qm.ini: |
    Service:
       SecurityPolicy=UserExternal

